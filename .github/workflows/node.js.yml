# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI and Deploy to Render

on:
  push:
    branches: [ "main" ]


jobs:
  build:

    runs-on: ubuntu-latest

    env:
      TEST_DB_NAME: dockerDB
      TEST_DB_PASSWORD: postgres
      TEST_DB_USER: postgres
      TEST_DB_HOST: localhost
      POSTGRES_PORT: 5432
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/dockerDB

    strategy:
      matrix:
        node-version: [22.2]
        
    services:
      postgres_db:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ env.TEST_DB_NAME }}
          POSTGRES_PASSWORD: ${{ env.TEST_DB_PASSWORD }}
          POSTGRES_USER: ${{ env.TEST_DB_USER }}
          POSTGRES_HOST: ${{ env.TEST_DB_HOST }}
          POSTGRES_PORT: 5432
          
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run : npm run migrate up
    - run: npm test

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Trigger Render Deployment
      env:
        RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        curl -X POST $RENDER_DEPLOY_HOOK
